{"version":3,"sources":["static/img/visitors.png","views/Home/Home.js","routes.js","components/containers/Navigation.js","components/containers/Header.js","components/containers/Footer.js","components/containers/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","useForm","handleSubmit","register","errors","useState","isLoading","setiIsLoading","className","src","require","alt","onSubmit","values","console","log","type","name","placeholder","ref","required","onChange","event","visitor_name","message","pattern","value","visitor_phone","visitor_email","host_name","host_email","host_phone","role","aria-hidden","routes","path","exact","component","React","lazy","Navigation","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","fallback","map","route","idx","key","render","props","from","Header","Footer","Layout","children","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6afe85d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/visitors.4544738f.png\";","import React, { useState } from 'react';\nimport useForm from \"react-hook-form\";\n\nconst Home = () => {\n\n    const { handleSubmit, register, errors } = useForm();\n    const [isLoading, setiIsLoading] = useState(false);\n    const onSubmit = values => {\n        setiIsLoading(true);\n        console.log(values);\n    };\n\n    return (\n        <div className=\"container contact-form\">\n            <div className=\"contact-image\">\n                <img src={require('../../static/img/visitors.png')} alt=\"visitors.png\"/>\n                <h3>Check In</h3>\n            </div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <input type=\"text\"\n                                   name=\"visitor_name\"\n                                   className=\"form-control\"\n                                   placeholder=\"Your Name *\"\n                                   ref={register({\n                                       required: 'Required'\n                                   })}\n                                   onChange={event =>{\n                                       //console.log(event)\n                                   }}\n                            />\n                            <span className={\"form-error-msg\"}>{errors.visitor_name && errors.visitor_name.message}</span>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <input type=\"text\"\n                                   name=\"visitor_phone\"\n                                   className=\"form-control\"\n                                   placeholder=\"Your Phone *\"\n                                   ref={register({\n                                       required: 'Required',\n                                       pattern: {\n                                           value: /^\\d{10}$/,\n                                           message: \"Invalid phone number (Only 10 digits)\"\n                                       }\n                                   })}\n                                   onChange={event =>{\n                                       //console.log(event)\n                                   }}\n                            />\n                            <span className={\"form-error-msg\"}>{errors.visitor_phone && errors.visitor_phone.message}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <input type=\"text\"\n                                   name=\"visitor_email\"\n                                   className=\"form-control\"\n                                   placeholder=\"Your Email *\"\n                                   ref={register({\n                                       required: 'Required',\n                                       pattern: {\n                                           value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                                           message: \"Invalid email address\"\n                                       }\n                                   })}\n                                   onChange={event =>{\n                                       //console.log(event)\n                                   }}\n                            />\n\n                            <span className={\"form-error-msg\"}>{errors.visitor_email && errors.visitor_email.message}</span>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <input type=\"text\"\n                                   name=\"host_name\"\n                                   className=\"form-control\"\n                                   placeholder=\"Host Name *\"\n                                   ref={register({\n                                       required: 'Required'\n                                   })}\n                                   onChange={event =>{\n                                       //console.log(event)\n                                   }}\n                            />\n                            <span className={\"form-error-msg\"}>{errors.host_name && errors.host_name.message}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <input type=\"text\"\n                                   name=\"host_email\"\n                                   className=\"form-control\"\n                                   placeholder=\"Host Email *\"\n                                   ref={register({\n                                       required: 'Required',\n                                       pattern: {\n                                           value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                                           message: \"Invalid email address\"\n                                       }\n                                   })}\n                                   onChange={event =>{\n                                       //console.log(event)\n                                   }}\n                            />\n                            <span className={\"form-error-msg\"}>{errors.host_email && errors.host_email.message}</span>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <input type=\"text\"\n                                   name=\"host_phone\"\n                                   className=\"form-control\"\n                                   placeholder=\"Host Phone *\"\n                                   ref={register({\n                                       required: 'Required',\n                                       pattern: {\n                                           value: /^\\d{10}$/,\n                                           message: \"Invalid phone number (Only 10 digits)\"\n                                       }\n                                   })}\n                                   onChange={event =>{\n                                       //console.log(event)\n                                   }}\n                            />\n                            <span className={\"form-error-msg\"}>{errors.host_phone && errors.host_phone.message}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"form-group text-center\">\n                            <button type=\"submit\" className=\"btn btn-outline-primary\">\n                                {\n                                    isLoading ? <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>: null\n                                }\n                            &nbsp; Submit\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Home = React.lazy(() => import('./views/Home'));\nconst Checkout = React.lazy(() => import('./views/Checkout'));\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\nconst routes = [\n  { path: '/check-in', exact: true, name: 'Home', component: Home},\n  { path: '/check-out', exact: true, name: 'checkout', component: Checkout}\n];\n\nexport default routes;\n","import React, { Suspense , useState } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport {Link} from 'react-router-dom';\nimport routes from '../../routes';\nconst Navigation = () => {\n\n    return (\n        <div className={\"text-center\"}>\n            {/*<nav className=\"navbar sticky-top navbar-light bg-light\">*/}\n            {/*    */}\n            {/*    <Link to={\"/check-in\"} className=\"navbar-brand\">Check In</Link>*/}\n            {/*    <Link to={\"/check-out\"} className=\"navbar-brand\">Check Out</Link>*/}\n            {/*</nav>*/}\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\">\n                <div className=\"container\">\n                    <a className=\"navbar-brand\" href=\"#\">Entry Level App</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                            data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\"\n                            aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                        <ul className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item active\">\n                                <Link to={\"/check-in\"} className=\"nav-link\">Check In <span className=\"sr-only\">(current)</span></Link>\n                            </li>\n                            <li className=\"nav-item active\">\n                                <Link to={\"/check-out\"} className=\"nav-link\">Check Out <span className=\"sr-only\">(current)</span></Link>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n            <Suspense fallback={'loading()'}>\n                <Switch>\n                    {routes.map((route, idx) => {\n                        return route.component ? (\n                            <Route\n                                key={idx}\n                                path={route.path}\n                                exact={route.exact}\n                                name={route.name}\n                                render={props => (\n                                    <route.component {...props} />\n                                )} />\n                        ) : (null);\n                    })}\n                    <Redirect from=\"/\" to=\"/check-in\" />\n                </Switch>\n            </Suspense>\n        </div>\n    )\n}\n\nexport default Navigation;","import React, { useState } from 'react';\nimport Navigation from './Navigation'; \nconst Header = () => {\n\n    return (\n        <div className={\"\"}>\n            <Navigation />    \n        </div>\n    )\n}\n\nexport default Header;","import React, { useState } from 'react';\n\nconst Footer = () => {\n\n    return (\n        <div className={\"\"}></div>\n    )\n}\n\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst Layout = (props) => {\n\n    return (\n        <div className={\"container-fluid\"}>\n            <Header />\n            {props.children}\n            <Footer />\n        </div>\n    )\n}\n\nexport default Layout;","import React from 'react';\nimport { BrowserRouter , Route, Link } from 'react-router-dom';\nimport Layout from './components/containers/Layout';\n\n/** Load all Components such as Login, Register, Static Pages etc */\nimport Home from './views/Home';\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n      <BrowserRouter>\n        <Layout>\n            <Route path=\"/\"  />\n        </Layout>\n      </BrowserRouter>\n  );\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../src/static/css/style.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}